[INPUT]
class Fib
  extend RubyInlineHaskell
  pp haskell <<-QED
    fib :: Fixnum -> Fixnum
    fib 0 = 0
    fib 1 = 1
    fib n = fib(n-2) + fib(n-1)

    sum :: [Fixnum] -> Fixnum
    sum [] = 0
    sum (x:xs) = x + sum xs

    zero :: Fixnum
    zero = 0
  QED
end

[STEP 1]
RubyInlineHaskell.classmethods got current class "Fib" and a Haskell code string.
  fib 0 = 0
  fib 1 = 1
  fib n = fib(n-2) + fib(n-1)

  sum :: [Fixnum] -> Fixnum
  sum [] = 0
  sum (x:xs) = x + sum xs

  zero :: Fixnum
  zero = 0

[STEP 2]
tokenize
[('fib', (:typedef, [Fixnum, Fixnum]),
 ('fib', (:litarg, 0, '0')),
 ('fib', (:litarg, 1, '1')),
 ('fib', (:vararg, ['n'], 'fib(n-2) + fib(n-1)'),
 ('sum', (:typedef, [[Fixnum], Fixnum]),
 ('sum', (:litarg, [], '0')),
 ('sum', (:vararg, ['x', 'xs'], 'x + sum xs')),
 ('zero', (:noarg, '0'))]]

[STEP 3]
hashize
{
  :fib => {
    :typedef => ['Fixnum', 'Fixnum'],
    :litargs => {0 => '0', 1 => '1'},
    :vararg => ['n'],
    :def => 'fib(n-2) + fib(n-1)'},
  :sum => {
    :typedef => [(Array, Fixnum), Fixnum],
    :litargs => {[] => '0'},
    :varargs => ['x', 'xs']
    :def => 'x + sum xs'},
  :zero => {
    :typedef => [Fixnum],
    :litargs => {},
    :varargs => [],
    :def => '0'}
}

[OUTPUT]
class Fib
  def self.fib(n)
    case n
    when 0
      return 0
    when 1
      return 1
    else
      fib(n-2) + fib(n-1)
    end
  end

  def sum(xs)
    case xs
    when []
      return 0
    else
      x, *xs = *xs
      x + sum xs
    end
  end

  def zero
    0
  end
end

describe Fib
  it 'fib :: Fixnum -> Fixnum' do
    n = rand(10)
    Fib.fib(n).class.should == Fixnum
  end

  it 'sum :: [Fixnum] -> Fixnum' do
    xs = Array.new(10) { rand(10) }
    Fib.sum(xs).class.should == Fixnum
  end

  it 'zero :: Fixnum' do
    Fib.zero.class.should == Fixnum
  end
end
